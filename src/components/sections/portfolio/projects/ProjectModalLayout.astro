---
const { id } = Astro.props;
---

<style>
  :global(.dialog-wrapper) {
    strong {
      @apply text-yellow-600;
    }

    img {
      @apply mb-6 rounded border border-default shadow-md;
    }

    h2 {
      @apply mb-4 text-pretty text-2xl font-bold text-default sm:mb-10 sm:text-6xl;
    }

    p {
      @apply mb-4 text-default;
    }

    .modal-buttons {
      @apply mt-6 flex flex-col flex-wrap gap-4 text-base sm:mt-10 sm:flex-row sm:justify-center sm:text-lg;

      a {
        @apply rounded px-4 py-2 text-center transition hover:opacity-90;
      }
    }

    .modal-content-wrapper {
      @apply sm:text-2xl;
    }
  }
</style>

<div
  id={id}
  class="dialog-wrapper fixed inset-0 z-50 hidden items-center justify-center"
  aria-modal="true"
  role="dialog"
  aria-labelledby={`${id}-title`}
  aria-describedby={`${id}-desc`}
  data-dialog-wrapper>
  <!-- Backdrop -->
  <div
    class="absolute inset-0 bg-gray-50/30 opacity-0 backdrop-blur-sm transition-opacity duration-300 ease-out"
    data-dialog-backdrop>
  </div>

  <!-- Modal Content -->
  <div
    class="relative z-10 m-4 max-h-[75vh] w-full max-w-4xl translate-y-4 scale-95 overflow-y-auto rounded-xl bg-modal p-6 opacity-0 shadow-xl transition-all duration-300 ease-out sm:p-12"
    data-dialog-content>
    <slot />
  </div>
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const openButtons = document.querySelectorAll("[data-dialog-open]");
    const closeButtons = document.querySelectorAll("[data-dialog-close]");

    function openDialog(dialog: HTMLElement) {
      const backdrop = dialog.querySelector("[data-dialog-backdrop]");
      const content = dialog.querySelector("[data-dialog-content]");

      dialog.classList.remove("hidden");
      dialog.classList.add("flex");
      document.body.style.overflow = "hidden";

      requestAnimationFrame(() => {
        backdrop.classList.add("opacity-100");
        content.classList.remove("opacity-0", "translate-y-4", "scale-95");
        content.classList.add("opacity-100", "translate-y-0", "scale-100");
      });
    }

    function closeDialog(dialog: HTMLElement) {
      const backdrop = dialog.querySelector("[data-dialog-backdrop]");
      const content = dialog.querySelector("[data-dialog-content]");

      backdrop.classList.remove("opacity-100");
      content.classList.remove("opacity-100", "translate-y-0", "scale-100");
      content.classList.add("opacity-0", "translate-y-4", "scale-95");
      document.body.style.overflow = "";

      setTimeout(() => {
        dialog.classList.remove("flex");
        dialog.classList.add("hidden");
      }, 300);
    }

    openButtons.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const dialogId = btn.getAttribute("data-dialog-open");
        const dialog = document.getElementById(dialogId);
        if (dialog) {
          openDialog(dialog);

          const backdrop = dialog.querySelector("[data-dialog-backdrop]") as HTMLElement;
          const content = dialog.querySelector("[data-dialog-content]") as HTMLElement;

          backdrop.onclick = () => closeDialog(dialog);
          content.onclick = (e) => e.stopPropagation();
        }
      });
    });

    closeButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const dialog = btn.closest("[role='dialog']") as HTMLElement;
        if (dialog) closeDialog(dialog);
      });
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        const openDialog = document.querySelector("[role='dialog'].flex") as HTMLElement;
        if (openDialog) closeDialog(openDialog);
      }
    });
  });
</script>
